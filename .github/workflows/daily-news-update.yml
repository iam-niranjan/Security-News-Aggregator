name: Daily News Update

on:
  schedule:
    - cron: '30 1 * * *'
  workflow_dispatch:

jobs:
  update-news:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Using a more stable Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run news update script
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        # Make sure the database is tracked before making changes
        touch security_news.db
        git add security_news.db

        # Create a backup of the current database for comparison
        if [ -f security_news.db ]; then
          cp security_news.db security_news.db.bak
          echo "Created backup of existing database"
          python -c "import sqlite3; conn=sqlite3.connect('security_news.db.bak'); c=conn.cursor(); c.execute('SELECT COUNT(*) FROM news'); print(f'News items in original database: {c.fetchone()[0]}')"
        fi

        # Run the update script to fetch today's news
        echo "Running news update script to fetch today's security news..."
        python update_news.py

        # Verify database was created and has data
        if [ ! -f security_news.db ]; then
          echo "Error: Database file not created"
          exit 1
        fi

        # Print database stats
        echo "Database file size: $(ls -la security_news.db | awk '{print $5}') bytes"
        python -c "import sqlite3; conn=sqlite3.connect('security_news.db'); c=conn.cursor(); c.execute('SELECT COUNT(*) FROM news'); print(f'News items in updated database: {c.fetchone()[0]}')"

        # Show some sample news items for verification
        echo "\nSample of latest news items:"
        python -c "import sqlite3, json; conn=sqlite3.connect('security_news.db'); conn.row_factory = sqlite3.Row; c=conn.cursor(); c.execute('SELECT title, source, date FROM news ORDER BY date DESC LIMIT 3'); print(json.dumps([dict(row) for row in c.fetchall()], indent=2))"

        # Show today's news items specifically
        echo "\nToday's news items:"
        python -c "import sqlite3, json, datetime; conn=sqlite3.connect('security_news.db'); conn.row_factory = sqlite3.Row; c=conn.cursor(); today=datetime.datetime.now().strftime('%Y-%m-%d'); c.execute('SELECT title, source, date FROM news WHERE date = ? ORDER BY date DESC', (today,)); today_items = [dict(row) for row in c.fetchall()]; print(f'Found {len(today_items)} items with today\'s date ({today})'); print(json.dumps(today_items, indent=2))"

        # Compare with backup to see if there are new items
        if [ -f security_news.db.bak ]; then
          echo "\nChecking for new items..."
          python -c "import sqlite3; conn1=sqlite3.connect('security_news.db.bak'); c1=conn1.cursor(); conn2=sqlite3.connect('security_news.db'); c2=conn2.cursor(); c1.execute('SELECT COUNT(*) FROM news'); old_count=c1.fetchone()[0]; c2.execute('SELECT COUNT(*) FROM news'); new_count=c2.fetchone()[0]; print(f'Old count: {old_count}, New count: {new_count}, Difference: {new_count - old_count}')"
          rm security_news.db.bak
        fi

    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

        # Force add the database file (ignoring .gitignore)
        git add -f security_news.db

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit in security_news.db"
        else
          git commit -m "Auto-update: Daily news fetch [$(date +'%Y-%m-%d %H:%M:%S')]"
          git push origin HEAD:${GITHUB_REF#refs/heads/}
          echo "Successfully committed and pushed changes"
        fi
